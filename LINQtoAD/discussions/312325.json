[
  {
    "Id": "762934",
    "ThreadId": "312325",
    "Html": "\r\n<p>Hello</p>\r\n<p>linq take statement is not supported in this project</p>\r\n<p>any one have idea how to query first 20 (grid pagesize) from linq to ad queury?</p>\r\n<p>and when page index change load next 20 results?</p>\r\n<p>&nbsp;</p>\r\n<p>other limitation i cant filter by group (memberOf)</p>\r\n<p>Any one has an idea how to filter by group?</p>\r\n<p>tahnk you very much for your help</p>\r\n",
    "PostedDate": "2012-02-14T05:20:25.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "799833",
    "ThreadId": "312325",
    "Html": "<p>1)</p>\n<p>Take isn't supported, but it's pretty easy to add it yourself. &nbsp;All of these changes are made to the DirectorySource class. &nbsp;Just create a nullable class variable that gets set in the Parse method for Take. &nbsp;I've highlighted the changes below:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Parse(Expression ex)\n{\n\t<span style=\"color: blue;\">var</span> ce = ex <span style=\"color: blue;\">as</span> ConstantExpression;\n\t<span style=\"color: blue;\">var</span> mce = ex <span style=\"color: blue;\">as</span> MethodCallExpression;\n\n\t<span style=\"color: blue;\">if</span> (ce != <span style=\"color: blue;\">null</span>)\n\t{\n\t\t_source = ce.Value <span style=\"color: blue;\">as</span> IDirectorySource;\n                originalType = _source.OriginalType;\n        }\n        <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (mce != <span style=\"color: blue;\">null</span>)\n        {\n                <span style=\"color: green;\">//</span>\n                <span style=\"color: green;\">// Should be extension methods on Queryable.</span>\n                <span style=\"color: green;\">//</span>\n                <span style=\"color: blue;\">if</span> (mce.Method.DeclaringType != <span style=\"color: blue;\">typeof</span>(Queryable))\n                    <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> NotSupportedException(<span style=\"color: #a31515;\">\"Detected invalid top-level method-call.\"</span>);\n\n                Parse(mce.Arguments[0]);\n\n                <span style=\"color: green;\">//</span>\n                <span style=\"color: green;\">// First parameter to the method call represents the (unary) lambda in LINQ style.</span>\n                <span style=\"color: green;\">// E.g. (user =&gt; user.Name == \"Bart\") for a Where  clause</span>\n                <span style=\"color: green;\">//      (user =&gt; new { user.Name })   for a Select clause</span>\n                <span style=\"color: green;\">//</span>\n                <span style=\"color: blue;\">switch</span> (mce.Method.Name)\n                {\n                    <span style=\"color: green;\">//</span>\n                    <span style=\"color: green;\">// Builds the query LDAP expression.</span>\n                    <span style=\"color: green;\">//</span>\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"Where\"</span>:\n                        BuildPredicate(((UnaryExpression)mce.Arguments[1]).Operand <span style=\"color: blue;\">as</span> LambdaExpression);\n                        <span style=\"color: blue;\">break</span>;\n                    <span style=\"color: green;\">//</span>\n                    <span style=\"color: green;\">// Builds the projection and filters the required properties.</span>\n                    <span style=\"color: green;\">//</span>\n                    <span style=\"color: blue;\">case</span> <span style=\"color: #a31515;\">\"Select\"</span>:\n                        BuildProjection(((UnaryExpression)mce.Arguments[1]).Operand <span style=\"color: blue;\">as</span> LambdaExpression);\n                        <span style=\"color: blue;\">break</span>;</pre>\n<pre><span style=\"background-color: white;\">\t            </span><span style=\"color: #ff00ff;\"><strong>case \"Take\":</strong></span></pre>\n<pre><span style=\"color: #ff00ff;\"><strong>\t\t\t_takeValue = (int)((ConstantantExpression)mce.Arguments[0]).Value;\n\t\t        break;</strong></span>\n                    <span style=\"color: blue;\">default</span>:\n                        <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> NotSupportedException(<span style=\"color: #a31515;\">\"Unsupported query operator: \"</span> + mce.Method.Name);\n                }\n        }\n\t<span style=\"color: blue;\">else</span>\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> NotSupportedException(<span style=\"color: #a31515;\">\"Invalid expression node detected.\"</span>);\n}\n</pre>\n</div>\n<p>Once that's done you just need to check it and set it when you perform a search:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">private</span> IEnumerator&lt;T&gt; GetResults()\n{\n    DirectorySchemaAttribute[] attr = (DirectorySchemaAttribute[])originalType.GetCustomAttributes(<span style=\"color: blue;\">typeof</span>(DirectorySchemaAttribute), <span style=\"color: blue;\">false</span>);\n    <span style=\"color: blue;\">if</span> (attr == <span style=\"color: blue;\">null</span> || attr.Length == 0)\n        <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> InvalidOperationException(<span style=\"color: #a31515;\">\"Missing schema mapping attribute.\"</span>);\n\n    <span style=\"color: blue;\">string</span> classQuery = String.Format(<span style=\"color: #a31515;\">\"(objectClass={0})\"</span>, attr[0].Schema);\n\n    DirectorySearcher s = Helpers.CloneSearcher(\n        _source.Searcher,\n        !<span style=\"color: blue;\">string</span>.IsNullOrEmpty(query) ? String.Format(<span style=\"color: #a31515;\">\"(&amp;{0}{1})\"</span>, classQuery, query) : classQuery,\n        properties.ToArray()\n    );\n    <span style=\"color: #ff00ff;\"><strong>if (_takeValue.HasValue) s.SizeLimit = _takeValue.Value;</strong></span>\n\n    <span style=\"color: green;\">//rest of method to perform search...</span>\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>As for paging the results, LDAP doesn't really support paging the way LINQ expects it to work. &nbsp;Paging is kind of abstracted away and only exposed through a cookie returned from the server. &nbsp;You can read more about it here: <a href=\"http://tools.ietf.org/html/rfc2696\">http://tools.ietf.org/html/rfc2696</a>. &nbsp;</p>\n<p>You can tell the DirectorySearcher to get everything by setting a sufficiently large PageSize, but getting a subset and then going to get more is not possible from what I can tell.</p>\n<p>2)</p>\n<p>You can filter by group. &nbsp;Just map the memberOf property as a string[] and do something like this:</p>\n<div style=\"color: black; background-color: white;\">\n<pre>context.Where(u =&gt; u.memberOf.Contains(\"[distinguished name of <span style=\"color: #000000;\">group</span>]\"))\n</pre>\n</div>\n<p>This will find all users that are a member of that group.</p>",
    "PostedDate": "2012-02-25T06:21:51.02-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]